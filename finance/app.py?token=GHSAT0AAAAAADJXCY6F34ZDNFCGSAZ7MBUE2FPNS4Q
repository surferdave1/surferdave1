import os

from cs50 import SQL
from flask import Flask, flash, redirect, render_template, request, session
from flask_session import Session
from werkzeug.security import check_password_hash, generate_password_hash

from helpers import apology, login_required, lookup, usd

# Configure application
app = Flask(__name__)

# Custom filter
app.jinja_env.filters["usd"] = usd

# Configure session to use filesystem (instead of signed cookies)
app.config["SESSION_PERMANENT"] = False
app.config["SESSION_TYPE"] = "filesystem"
Session(app)

# Configure CS50 Library to use SQLite database
db = SQL("sqlite:///finance.db")


@app.after_request
def after_request(response):
    """Ensure responses aren't cached"""
    response.headers["Cache-Control"] = "no-cache, no-store, must-revalidate"
    response.headers["Expires"] = 0
    response.headers["Pragma"] = "no-cache"
    return response


@app.route("/")
@login_required
def portfolio():
    """Show portfolio of stocks"""
    # look up qty of stock symbols owned by user
    # use variable rows
    user_id = session["user_id"]
    # query to collect all unique symbols for the user and sum of shares for each
    rows = db.execute("""
        SELECT symbol, SUM(shares) AS total_shares
        FROM transactions
        WHERE user_id = ?
        GROUP BY symbol
        """, user_id)

    portfolio = []
    # create function to iterate over each row in symbol_shares
    # add the share count & total value to each
    for row in rows:
        symbol = row["symbol"]
        shares = row["total_shares"]
        # look up current price of the stock
        quote = lookup(symbol)
        # quote = {
        #   "symbol": "AAPL",
        #   "name": "Apple Inc.";
        #   "price": 189.45
        # }
        if quote:  # safety check. if None (invalid or API failed), block will be skipped
            price = quote["price"]  # puts in price attribute (vs others)
            total_value = shares * price

            # append stock info to portfolio list
            portfolio.append({
                "symbol": symbol,
                "shares": shares,
                "price": usd(price),
                "total_value": usd(total_value)
            })
    # calculate total portfolio value
    total_portfolio_value = sum(float(stock["total_value"].replace(
        '$', '').replace(',', ''))for stock in portfolio)
    # look up cash
    cash_result = db.execute("SELECT cash FROM users WHERE id = ?", user_id)
    cash = cash_result[0]['cash']
    return render_template("portfolio.html", portfolio=portfolio, total=usd(total_portfolio_value), cash=usd(cash))


@app.route("/buy", methods=["GET", "POST"])
@login_required
def buy():
    """Buy shares of stock"""
    if request.method == "GET":
        return render_template("buy.html")
    if request.method == "POST":
        symbol = request.form.get("symbol")
        shares = request.form.get("shares")

        if not symbol:
            return apology("enter symbol", 400)
        if not shares:
            return apology("enter shares", 400)
        if not shares.isdigit() or int(shares) <= 0:
            return apology("shares must be positive integer", 400)
        result = lookup(symbol)
        if result is None:
            return apology("invalid symbol!", 400)

        price = result["price"]
        shares = int(shares)
        total_cost = price * shares
        user_id = session["user_id"]
        symbol = result["symbol"]

        # purchase shares
        # confirm enough funds exist
        user_cash = db.execute("SELECT cash FROM users WHERE id = ?", user_id)[0]["cash"]

        # cash_left = funds - total_cost
        if user_cash < total_cost:
            return apology("insufficient funds", 400)
        # add transaction details to transactions table
        db.execute(
            "INSERT INTO transactions (price, shares,amount_paid,user_id, symbol) VALUES (?,?,?,?,?)", price, shares, total_cost, user_id, symbol
        )
        # subtract amount spent from cash in users
        db.execute(
            "UPDATE users SET cash = ? WHERE id = ?", user_cash-total_cost, user_id
        )
        # Redirect user to home page
        return redirect("/")


@app.route("/history")
@login_required
def history():
    """Show history of transactions"""
    user_id = session["user_id"]
    # query to collect all unique symbols for the user and sum of shares for each
    rows = db.execute("""
        SELECT symbol, shares, price, date
        FROM transactions
        WHERE user_id = ?
        ORDER BY date ASC
        """, user_id)

    transactions = []
    # create function to iterate over each row in symbol_shares
    # add the share count & total value to each
    for row in rows:
        symbol = row["symbol"]
        shares = row["shares"]
        price = row["price"]
        date = row["date"]

        # append stock info to transactions list
        transactions.append({
            "symbol": symbol,
            "shares": shares,
            "price": usd(price),
            "date": date
        })

    return render_template("history.html", transactions=transactions)


@app.route("/login", methods=["GET", "POST"])
def login():
    """Log user in"""

    # Forget any user_id
    session.clear()

    # User reached route via POST (as by submitting a form via POST)
    if request.method == "POST":
        # Ensure username was submitted
        if not request.form.get("username"):
            return apology("must provide username", 400)

        # Ensure password was submitted
        elif not request.form.get("password"):
            return apology("must provide password", 400)

        # Query database for username
        rows = db.execute(
            "SELECT * FROM users WHERE username = ?", request.form.get("username")
        )

        # Ensure username exists and password is correct
        if len(rows) != 1 or not check_password_hash(
            rows[0]["hash"], request.form.get("password")
        ):
            return apology("invalid username and/or password", 400)

        # Remember which user has logged in
        session["user_id"] = rows[0]["id"]

        # Redirect user to home page
        return redirect("/")

    # User reached route via GET (as by clicking a link or via redirect)
    else:
        return render_template("login.html")


@app.route("/logout")
def logout():
    """Log user out"""

    # Forget any user_id
    session.clear()

    # Redirect user to login form
    return redirect("/")


@app.route("/quote", methods=["GET", "POST"])
@login_required
def quote():
    """Get stock quote."""

    if request.method == "GET":
        return render_template("quote.html")

    if request.method == "POST":
        symbol = request.form.get("symbol")
        result = lookup(symbol)
        if result is None:
            return apology("invalid symbol!", 400)
        result["price"] = usd(result["price"])
        quote = result
    return render_template("quoted.html", quote=quote)


@app.route("/register", methods=["GET", "POST"])
def register():
    """Register user"""
# Forget any user_id
    session.clear()
    if request.method == "POST":
        username = request.form.get("username")
        password = request.form.get("password")
        confirmation = request.form.get("confirmation")

        # Check for missing fields
        if not username:
            return apology("must provide username", 400)
        # Ensure password was submitted
        elif not password:
            return apology("must provide password", 400)
        elif not confirmation:
            return apology("must confirm password", 400)
        if password != confirmation:
            return apology("Passwords do not match", 400)
        #  create hash from password
        hash = generate_password_hash(password)
        # Check if username already exists
        try:
            db.execute(
                "INSERT INTO users (username, hash) VALUES (?, ?)", username, hash
            )
        except ValueError:
            return apology("Username already exists", 400)
        # Redirect user to home page
        return redirect("/")

    # User reached route via GET (as by clicking a link or via redirect)
    return render_template("register.html")


@app.route("/sell", methods=["GET", "POST"])
@login_required
def sell():
    """Sell shares of stock"""
    user_id = session["user_id"]

    # query to collect all unique symbols for the user and sum of shares for each
    rows = db.execute("""
        SELECT symbol, SUM(shares) AS total_shares
        FROM transactions
        WHERE user_id = ?
        GROUP BY symbol
        """, user_id)

    portfolio = []
    # create function to iterate over each row in symbol_shares
    # add the share count & total value to each
    for row in rows:
        symbol = row["symbol"]
        shares = row["total_shares"]

        # look up current price of the stock
        quote = lookup(symbol)
        if quote:  # safety check. if None (invalid or API failed), block will be skipped
            price = quote["price"]  # puts in price attribute (vs others)
            # append stock info to portfolio list
            portfolio.append({
                "symbol": symbol,
                "shares": shares,
                "price": usd(price),
            })
    if request.method == "GET":
        # enable user to sell shares of stock
        return render_template("sell.html", portfolio=portfolio)
    if request.method == "POST":
        symbol = request.form.get("symbol")
        shares = request.form.get("shares")

        if not symbol:
            return apology("must select symbol", 400)
        if not shares:
            # render apology if no shares owned
            return apology("must own/choose qty of shares", 400)
        try:
            shares = int(shares)
        except ValueError:
            return apology("Shares must be a valid number", 400)

        if shares < 0:
            # render apology if integer not positive or user doesn't own enough shares
            return apology("must choose a positive number", 400)
        # find total shares owned of selected symbol
        owned = db.execute("""
            SELECT SUM(shares) AS total_shares
            FROM transactions
            WHERE user_id = ? and symbol = ?
            """, user_id, symbol)[0]["total_shares"]
        # confirm enough funds exist
        if owned < shares:
            return apology("request to sell more shares than owned")

        quote = lookup(symbol)
        if not quote:
            return apology("Invalid stock symbol", 400)

        # submit users input via Post to /sell (Done, HTML)
        price = quote["price"]
        total_value = price * shares

        # sell shares (as a negative transaction)

        db.execute(
            "INSERT INTO transactions (price, shares,amount_paid,user_id, symbol) VALUES (?,?,?,?,?)", price, -
            shares, total_value, user_id, symbol
        )
        # update cash balance of user
        user_cash = db.execute("SELECT cash FROM users WHERE id = ?", user_id)[0]["cash"]
        db.execute("UPDATE users SET cash = ? WHERE id = ?", user_cash + total_value, user_id
                   )
    return redirect("/")  # upon completion redirect to users home page


@app.route("/funds", methods=["GET", "POST"])
@login_required
def funds():
    """Deposit/Withdraw Funds"""
    user_id = session["user_id"]
    if request.method == "GET":

        # look up cash
        cash_result = db.execute("SELECT cash FROM users WHERE id = ?", user_id)
        cash = cash_result[0]['cash']
        return render_template("funds.html", cash = usd(cash))
    if request.method == "POST":
        action = request.form.get("action")
        amount = request.form.get("amount")

        if not action:
            return apology("must select action", 400)
        if not amount:
            return apology("must choose qty", 400)
        try:
            amount = int(amount)
        except ValueError:
            return apology("Amount must be a valid number", 400)
        if action == "withdraw":
            amount = -amount
            user_cash = db.execute("SELECT cash FROM users WHERE id = ?", user_id)[0]["cash"]
            if user_cash < -amount:
                return apology("Must not overdraw account", 400)
        # log transaction in ledger
        db.execute(
            "INSERT INTO transactions (symbol, price, shares, amount_paid,user_id) VALUES (?,?,?,?,?)", "N/A", 0, 0, amount, user_id
        )
        # update cash balance of user
        user_cash = db.execute("SELECT cash FROM users WHERE id = ?", user_id)[0]["cash"]
        db.execute("UPDATE users SET cash = ? WHERE id = ?", amount+user_cash, user_id
                   )

    # look up cash
    cash_result = db.execute("SELECT cash FROM users WHERE id = ?", user_id)
    cash = cash_result[0]['cash']
    return render_template("funds.html", cash = usd(cash))
    # update change cash in ledger
    # go back to history
